excluded_templates: []
iaas_auth: false
label_propagation_exclusions: ["kapp.k14s.io/app", "kapp.k14s.io/association"]
carvel_package:
  parameters:
    - selector:
        matchLabels:
          apps.tanzu.vmware.com/workload-type: server
      schema: |
        #@data/values-schema
        ---
        #@schema/title "Workload name"
        #@schema/example "tanzu-java-web-app"
        #@schema/validation min_len=1
        workload_name: ""

        #@schema/title "Replicas"
        replicas: 1

        #@schema/title "Port"
        port: 8080

        #@schema/title "Hostname"
        #@schema/example "app.tanzu.vmware.com"
        hostname: ""

        #@schema/title "Cluster Issuer"
        cluster_issuer: "tap-ingress-selfsigned"

        #@schema/nullable
        http_route:
            #@schema/default [{"protocol": "https", "name": "default-gateway"}]
            gateways:
            - protocol: ""
              name: ""
      overlays: |
        #@ load("@ytt:overlay", "overlay")
        #@ load("@ytt:data", "data")

        #@overlay/match by=overlay.subset({"apiVersion":"apps/v1", "kind": "Deployment"})
        ---
        spec:
          #@overlay/match missing_ok=True
          replicas: #@ data.values.replicas

        #@ if data.values.http_route != None:
        ---
        apiVersion: gateway.networking.k8s.io/v1beta1
        kind: HTTPRoute
        metadata:
          name: #@ data.values.workload_name + "-route"
          labels:
            app.kubernetes.io/part-of: #@ data.values.workload_name
            carto.run/workload-name:  #@ data.values.workload_name
        spec:
          parentRefs:
          #@ for/end gateway in data.values.http_route.gateways:
          - group: gateway.networking.k8s.io
            kind: Gateway
            name: #@ gateway.name
            sectionName: #@ gateway.protocol + "-" + data.values.workload_name
          rules:
          - backendRefs:
            - name: #@ data.values.workload_name
              port: #@ data.values.port
        #@ elif data.values.hostname != "":
        ---
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: #@ data.values.workload_name
          annotations:
            cert-manager.io/cluster-issuer:  #@ data.values.cluster_issuer
            ingress.kubernetes.io/force-ssl-redirect: "true"
            kubernetes.io/ingress.class: contour
            kapp.k14s.io/change-rule: "upsert after upserting Services"
          labels:
            app.kubernetes.io/part-of: #@ data.values.workload_name
            app.kubernetes.io/component: "run"
            carto.run/workload-name:  #@ data.values.workload_name
        spec:
          tls:
            - secretName: #@ data.values.workload_name
              hosts:
              - #@ data.values.hostname
          rules:
          - host: #@ data.values.hostname
            http:
              paths:
              - pathType: Prefix
                path: /
                backend:
                  service:
                    name: #@ data.values.workload_name
                    port:
                      number: #@ data.values.port
        #@ end
    - selector:
        matchLabels:
          apps.tanzu.vmware.com/workload-type: web
      schema: |
        #@data/values-schema
        ---
        #@schema/validation min_len=1
        workload_name: ""
      overlays: ""
    - selector:
        matchLabels:
          apps.tanzu.vmware.com/workload-type: worker
      schema: |
        #@data/values-schema
        ---
        #@schema/validation min_len=1
        workload_name: ""
        replicas: 1
      overlays: |
        #@ load("@ytt:overlay", "overlay")
        #@ load("@ytt:data", "data")
        #@overlay/match by=overlay.subset({"apiVersion":"apps/v1", "kind": "Deployment"})
        ---
        spec:
          #@overlay/match missing_ok=True
          replicas: #@ data.values.replicas
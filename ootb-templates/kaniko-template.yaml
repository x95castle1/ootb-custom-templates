#@ load("@ytt:data", "data")

#@ if/end "kaniko-template" not in data.values.excluded_templates:
---
apiVersion: carto.run/v1alpha1
kind: ClusterImageTemplate
metadata:
  name: kaniko-template
spec:
  params:
    - name: serviceAccount
      default: default
    - name: registry
      default: {}
    - name: dockerfile
      default: ./Dockerfile
    - name: docker_build_context
      default: ./
    - name: docker_build_extra_args
      default: []

  imagePath: .status.taskResults[?(@.name=="image_ref")].value

  lifecycle: tekton
  retentionPolicy:
    maxFailedRuns: 2
    maxSuccessfulRuns: 2

  #@ label_exclusions = "[\"" + "\", \"".join(data.values.label_propagation_exclusions) + "\"]"
  #@yaml/text-templated-strings
  ytt: |
    #@ load("@ytt:data", "data")
    #@ load("@ytt:regexp", "regexp")

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     exclusions = (@= label_exclusions @)
    #@     for k,v in dict(data.values.workload.metadata.labels).items():
    #@       if k not in exclusions:
    #@         labels[k] = v
    #@       end
    #@     end
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def param(key):
    #@   if not key in data.values.params:
    #@     return None
    #@   end
    #@   return data.values.params[key]
    #@ end

    #@ def maven_param(key):
    #@   if not key in data.values.params["maven"]:
    #@     return None
    #@   end
    #@   return data.values.params["maven"][key]
    #@ end

    #@ def maven_repository_url():
    #@   if maven_param("repository") and "url" in maven_param("repository"):
    #@     return maven_param("repository")["url"]
    #@   elif param("maven_repository_url"):
    #@     return param("maven_repository_url")
    #@   else:
    #@     return None
    #@   end
    #@ end

    #@ def image():
    #@   return "/".join([
    #@    data.values.params.registry.server,
    #@    data.values.params.registry.repository,
    #@    "-".join([
    #@      data.values.workload.metadata.name,
    #@      data.values.workload.metadata.namespace,
    #@    ])
    #@   ])
    #@ end

    #@ def ca_cert_data():
    #@   if "ca_cert_data" not in param("registry"):
    #@     return ""
    #@   end
    #@
    #@   return param("registry")["ca_cert_data"]
    #@ end

    #@ def correlationId():
    #@   if hasattr(data.values.workload, "annotations") and hasattr(data.values.workload.annotations, "apps.tanzu.vmware.com/correlationid"):
    #@     return data.values.workload.annotations["apps.tanzu.vmware.com/correlationid"]
    #@   end
    #@   url = ""
    #@   if hasattr(data.values.workload.spec, "source"):
    #@     if hasattr(data.values.workload.spec.source, "git"):
    #@       url = data.values.workload.spec.source.git.url
    #@     elif hasattr(data.values.workload.spec.source, "image"):
    #@       url = data.values.workload.spec.source.image.split("@")[0]
    #@     end
    #@     url = url + "?sub_path=" + getattr(data.values.workload.spec.source, "subPath", "/")
    #@   end
    #@   if param("maven"):
    #@     url = maven_repository_url() + "/" + maven_param("groupId").replace(".", "/") + "/" + maven_param("artifactId")
    #@   end
    #@   return url
    #@ end

    #!  if the source revision matches the format of a git sha
    #!  we add it to the image labels
    #@ def merge_docker_extra_args():
    #@  extra_args = data.values.params.docker_build_extra_args
    #@  if regexp.match("^([a-zA-Z0-9\/_-]+)(\@sha1:)?([0-9a-f]{40})$", data.values.source.revision):
    #@    for val in extra_args:
    #@      if val.count("org.opencontainers.image.revision") > 0:
    #@        return extra_args
    #@      end
    #@    end
    #@  else:
    #@     return extra_args
    #@  end
    #@
    #@  extra_args.append("--label=org.opencontainers.image.revision={}".format(data.values.source.revision))
    #@  return extra_args
    #@ end

    ---
    apiVersion: tekton.dev/v1beta1
    kind: TaskRun
    metadata:
      generateName: #@ data.values.workload.metadata.name + "-build-"
      labels: #@ merge_labels({ "app.kubernetes.io/component": "build" })
      annotations:
        apps.tanzu.vmware.com/correlationid: #@ correlationId()
    spec:
      serviceAccountName: #@ data.values.params.serviceAccount
      params:
        - name: image
          value: #@ image()
        - name: source_tar
          value: #@ data.values.source.url
        - name: dockerfile
          value: #@ data.values.params.dockerfile
        - name: context
          value: #@ data.values.params.docker_build_context
        - name: extra_args
          value: #@ merge_docker_extra_args()
        - name: ca_cert_data
          value: #@ ca_cert_data()
      taskSpec:
        results:
          - description: Digest of the image just built.
            name: image_digest
          - description: Ref of the image just built.
            name: image_ref
        steps:
          - name: pull-source-code
            image: supply-chain-docker-prod-local.usw1.packages.broadcom.com/packages/catalog-v1/ootb-templates/scripting-base@sha256:89c74ab6c164fb57b45dc53bd4d2cd43ea145754fb795f37d4679109707e41be
            script: |
              #!/usr/bin/env bash

              set -o errexit
              set -o xtrace

              source="$(params.source_tar)"

              cd `mktemp -d`
              curl -sL -o source.tar.gz "${source}"
              tar --touch --no-overwrite-dir -xzf source.tar.gz -C /source
            securityContext:
              runAsUser: 0
            volumeMounts:
              - name: source-dir
                mountPath: /source
          - name: copy-docker-config-and-certs
            env:
              - name: "DOCKER_CONFIG"
                value: "/docker-config/"
            image: supply-chain-docker-prod-local.usw1.packages.broadcom.com/packages/catalog-v1/ootb-templates/scripting-base@sha256:89c74ab6c164fb57b45dc53bd4d2cd43ea145754fb795f37d4679109707e41be
            script: |
              #!/usr/bin/env bash

              set -o errexit
              set -o xtrace

              if [[ -f /tekton/creds/.docker/config.json ]]; then
                cp /tekton/creds/.docker/config.json /docker-config/
              else
                echo "docker config not found. continuing" > /dev/null
              fi

              cp /etc/ssl/certs/ca-certificates.crt /certs/ca-certificates.crt
              if [[ ! -z "$(params.ca_cert_data)" ]]; then
                echo "$(params.ca_cert_data)" >> /certs/ca-certificates.crt
              fi
            volumeMounts:
              - name: docker-config
                mountPath: /docker-config
              - name: ca-certs
                mountPath: /certs
          - name: build-and-push
            env:
              - name: "DOCKER_CONFIG"
                value: "/kaniko/.docker"
            image: supply-chain-docker-prod-local.usw1.packages.broadcom.com/packages/catalog-v1/ootb-templates/kaniko@sha256:2c817acb57d6785a18b3e02bd2319b43990e040621c926fcc556219c99a5cdee
            args:
              - $(params.extra_args)
              - --dockerfile=$(params.dockerfile)
              - --context=dir:///source/$(params.context)
              - --destination=$(params.image)
              - --digest-file=$(results.image_digest.path)
              - --ignore-path=//product_uuid
            securityContext:
              runAsUser: 0
            volumeMounts:
              - name: source-dir
                mountPath: /source
              - name: docker-config
                mountPath: /kaniko/.docker
              - name: ca-certs
                mountPath: /kaniko/ssl/certs
          - name: write-image-ref
            image: supply-chain-docker-prod-local.usw1.packages.broadcom.com/packages/catalog-v1/ootb-templates/scripting-base@sha256:89c74ab6c164fb57b45dc53bd4d2cd43ea145754fb795f37d4679109707e41be
            script: |
              #!/usr/bin/env bash

              set -o errexit
              set -o xtrace

              image="$(params.image)"
              digest_path="$(results.image_digest.path)"
              digest="$(cat ${digest_path})"

              echo -n "${image}@${digest}" | tee "$(results.image_ref.path)"
        volumes:
          - name: docker-config
            emptyDir: {}
          - name: source-dir
            emptyDir: {}
          - name: ca-certs
            emptyDir: {}

